
Motor_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e74  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003f84  08003f84  00004f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa8  08003fa8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003fa8  08003fa8  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003fa8  08003fa8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa8  08003fa8  00004fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fac  08003fac  00004fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003fb0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08003fbc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003fbc  00005168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f53  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019aa  00000000  00000000  0000ef88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00010938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000878  00000000  00000000  00011430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176f8  00000000  00000000  00011ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b18e  00000000  00000000  000293a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a712  00000000  00000000  0003452e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bec40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002efc  00000000  00000000  000bec84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000c1b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003f6c 	.word	0x08003f6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003f6c 	.word	0x08003f6c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <Motor_left_Set_Speed>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Motor_left_Set_Speed(uint16_t speed)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
	if (speed > 100) speed =100;
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	2b64      	cmp	r3, #100	@ 0x64
 800093a:	d901      	bls.n	8000940 <Motor_left_Set_Speed+0x14>
 800093c:	2364      	movs	r3, #100	@ 0x64
 800093e:	80fb      	strh	r3, [r7, #6]
	uint32_t pulse = ( speed * 999)/100;
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000946:	fb02 f303 	mul.w	r3, r2, r3
 800094a:	4a08      	ldr	r2, [pc, #32]	@ (800096c <Motor_left_Set_Speed+0x40>)
 800094c:	fb82 1203 	smull	r1, r2, r2, r3
 8000950:	1152      	asrs	r2, r2, #5
 8000952:	17db      	asrs	r3, r3, #31
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <Motor_left_Set_Speed+0x44>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	68fa      	ldr	r2, [r7, #12]
 800095e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	51eb851f 	.word	0x51eb851f
 8000970:	200000e0 	.word	0x200000e0

08000974 <Motor_right_Set_Speed>:
void Motor_right_Set_Speed(uint16_t speed)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	80fb      	strh	r3, [r7, #6]
	if (speed > 100) speed =100;
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	2b64      	cmp	r3, #100	@ 0x64
 8000982:	d901      	bls.n	8000988 <Motor_right_Set_Speed+0x14>
 8000984:	2364      	movs	r3, #100	@ 0x64
 8000986:	80fb      	strh	r3, [r7, #6]
	uint32_t pulse = ( speed * 999)/100;
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800098e:	fb02 f303 	mul.w	r3, r2, r3
 8000992:	4a08      	ldr	r2, [pc, #32]	@ (80009b4 <Motor_right_Set_Speed+0x40>)
 8000994:	fb82 1203 	smull	r1, r2, r2, r3
 8000998:	1152      	asrs	r2, r2, #5
 800099a:	17db      	asrs	r3, r3, #31
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 80009a0:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <Motor_right_Set_Speed+0x44>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	51eb851f 	.word	0x51eb851f
 80009b8:	20000050 	.word	0x20000050

080009bc <Motor_left_Set_Direction>:
void Motor_left_Set_Direction(uint8_t direct)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
	switch (direct)
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d01c      	beq.n	8000a06 <Motor_left_Set_Direction+0x4a>
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	dc25      	bgt.n	8000a1c <Motor_left_Set_Direction+0x60>
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d002      	beq.n	80009da <Motor_left_Set_Direction+0x1e>
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d00b      	beq.n	80009f0 <Motor_left_Set_Direction+0x34>
		case 2:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
			break;
	}
}
 80009d8:	e020      	b.n	8000a1c <Motor_left_Set_Direction+0x60>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2102      	movs	r1, #2
 80009de:	4811      	ldr	r0, [pc, #68]	@ (8000a24 <Motor_left_Set_Direction+0x68>)
 80009e0:	f001 ffb4 	bl	800294c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2101      	movs	r1, #1
 80009e8:	480e      	ldr	r0, [pc, #56]	@ (8000a24 <Motor_left_Set_Direction+0x68>)
 80009ea:	f001 ffaf 	bl	800294c <HAL_GPIO_WritePin>
			break;
 80009ee:	e015      	b.n	8000a1c <Motor_left_Set_Direction+0x60>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2102      	movs	r1, #2
 80009f4:	480b      	ldr	r0, [pc, #44]	@ (8000a24 <Motor_left_Set_Direction+0x68>)
 80009f6:	f001 ffa9 	bl	800294c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2101      	movs	r1, #1
 80009fe:	4809      	ldr	r0, [pc, #36]	@ (8000a24 <Motor_left_Set_Direction+0x68>)
 8000a00:	f001 ffa4 	bl	800294c <HAL_GPIO_WritePin>
			break;
 8000a04:	e00a      	b.n	8000a1c <Motor_left_Set_Direction+0x60>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2102      	movs	r1, #2
 8000a0a:	4806      	ldr	r0, [pc, #24]	@ (8000a24 <Motor_left_Set_Direction+0x68>)
 8000a0c:	f001 ff9e 	bl	800294c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2101      	movs	r1, #1
 8000a14:	4803      	ldr	r0, [pc, #12]	@ (8000a24 <Motor_left_Set_Direction+0x68>)
 8000a16:	f001 ff99 	bl	800294c <HAL_GPIO_WritePin>
			break;
 8000a1a:	bf00      	nop
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40010800 	.word	0x40010800

08000a28 <Motor_right_Set_Direction>:
void Motor_right_Set_Direction(uint8_t direct)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	switch (direct)
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d01c      	beq.n	8000a72 <Motor_right_Set_Direction+0x4a>
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	dc25      	bgt.n	8000a88 <Motor_right_Set_Direction+0x60>
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <Motor_right_Set_Direction+0x1e>
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d00b      	beq.n	8000a5c <Motor_right_Set_Direction+0x34>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
			break;
	}
}
 8000a44:	e020      	b.n	8000a88 <Motor_right_Set_Direction+0x60>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2140      	movs	r1, #64	@ 0x40
 8000a4a:	4811      	ldr	r0, [pc, #68]	@ (8000a90 <Motor_right_Set_Direction+0x68>)
 8000a4c:	f001 ff7e 	bl	800294c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2120      	movs	r1, #32
 8000a54:	480e      	ldr	r0, [pc, #56]	@ (8000a90 <Motor_right_Set_Direction+0x68>)
 8000a56:	f001 ff79 	bl	800294c <HAL_GPIO_WritePin>
			break;
 8000a5a:	e015      	b.n	8000a88 <Motor_right_Set_Direction+0x60>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2140      	movs	r1, #64	@ 0x40
 8000a60:	480b      	ldr	r0, [pc, #44]	@ (8000a90 <Motor_right_Set_Direction+0x68>)
 8000a62:	f001 ff73 	bl	800294c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2120      	movs	r1, #32
 8000a6a:	4809      	ldr	r0, [pc, #36]	@ (8000a90 <Motor_right_Set_Direction+0x68>)
 8000a6c:	f001 ff6e 	bl	800294c <HAL_GPIO_WritePin>
			break;
 8000a70:	e00a      	b.n	8000a88 <Motor_right_Set_Direction+0x60>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2140      	movs	r1, #64	@ 0x40
 8000a76:	4806      	ldr	r0, [pc, #24]	@ (8000a90 <Motor_right_Set_Direction+0x68>)
 8000a78:	f001 ff68 	bl	800294c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2120      	movs	r1, #32
 8000a80:	4803      	ldr	r0, [pc, #12]	@ (8000a90 <Motor_right_Set_Direction+0x68>)
 8000a82:	f001 ff63 	bl	800294c <HAL_GPIO_WritePin>
			break;
 8000a86:	bf00      	nop
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40010c00 	.word	0x40010c00

08000a94 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) // xử lý ngắt CAN nhận dữ liệụ
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f001 f957 	bl	8001d56 <HAL_CAN_GetRxMessage>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d12a      	bne.n	8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
	{
		if(RxHeader.StdId == 0x01)
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d126      	bne.n	8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
		{
			if (RxData[0] > 127)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	da06      	bge.n	8000ace <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
			{
				Motor_left_speed = (int)RxData[0] - 256;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ac8:	4a12      	ldr	r2, [pc, #72]	@ (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	e004      	b.n	8000ad8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
			}
			else
			{
				Motor_left_speed = (int)RxData[0];
 8000ace:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000ad6:	601a      	str	r2, [r3, #0]
			}
			if (RxData[1] > 127)
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000ada:	785b      	ldrb	r3, [r3, #1]
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	da06      	bge.n	8000af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
			{
				Motor_right_speed = (int)RxData[1] - 256;
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000ae4:	785b      	ldrb	r3, [r3, #1]
 8000ae6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000aea:	4a0b      	ldr	r2, [pc, #44]	@ (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e004      	b.n	8000afa <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
			}
			else
			{
				Motor_right_speed = (int)RxData[1];
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000af2:	785b      	ldrb	r3, [r3, #1]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000af8:	601a      	str	r2, [r3, #0]
			}
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000afa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000afe:	4807      	ldr	r0, [pc, #28]	@ (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000b00:	f001 ff3c 	bl	800297c <HAL_GPIO_TogglePin>
		}
	}
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000144 	.word	0x20000144
 8000b10:	20000128 	.word	0x20000128
 8000b14:	2000014c 	.word	0x2000014c
 8000b18:	20000150 	.word	0x20000150
 8000b1c:	40011000 	.word	0x40011000

08000b20 <Read_Encoder_Speed>:
void Read_Encoder_Speed(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
    encoder_count = __HAL_TIM_GET_COUNTER(&htim2);
 8000b24:	4b40      	ldr	r3, [pc, #256]	@ (8000c28 <Read_Encoder_Speed+0x108>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000c2c <Read_Encoder_Speed+0x10c>)
 8000b2e:	601a      	str	r2, [r3, #0]
    diff = encoder_count - last_encoder_count;
 8000b30:	4b3e      	ldr	r3, [pc, #248]	@ (8000c2c <Read_Encoder_Speed+0x10c>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b3e      	ldr	r3, [pc, #248]	@ (8000c30 <Read_Encoder_Speed+0x110>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c34 <Read_Encoder_Speed+0x114>)
 8000b3c:	6013      	str	r3, [r2, #0]

    // Xử lý trường hợp tràn số (Timer 16-bit)
    if (diff > 32767) diff -= 65536;
 8000b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c34 <Read_Encoder_Speed+0x114>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000b46:	db06      	blt.n	8000b56 <Read_Encoder_Speed+0x36>
 8000b48:	4b3a      	ldr	r3, [pc, #232]	@ (8000c34 <Read_Encoder_Speed+0x114>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8000b50:	4a38      	ldr	r2, [pc, #224]	@ (8000c34 <Read_Encoder_Speed+0x114>)
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	e00a      	b.n	8000b6c <Read_Encoder_Speed+0x4c>
    else if (diff < -32767) diff += 65536;
 8000b56:	4b37      	ldr	r3, [pc, #220]	@ (8000c34 <Read_Encoder_Speed+0x114>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8000b5e:	dc05      	bgt.n	8000b6c <Read_Encoder_Speed+0x4c>
 8000b60:	4b34      	ldr	r3, [pc, #208]	@ (8000c34 <Read_Encoder_Speed+0x114>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000b68:	4a32      	ldr	r2, [pc, #200]	@ (8000c34 <Read_Encoder_Speed+0x114>)
 8000b6a:	6013      	str	r3, [r2, #0]

    // Tính tốc độ RPM
    motor_speed_rpm = (abs(diff) * 10.0 / (ENCODER_PPR * 30)) * 60.0;  // *10 do gọi mỗi 0.1s
 8000b6c:	4b31      	ldr	r3, [pc, #196]	@ (8000c34 <Read_Encoder_Speed+0x114>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bfb8      	it	lt
 8000b74:	425b      	neglt	r3, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fc3c 	bl	80003f4 <__aeabi_i2d>
 8000b7c:	f04f 0200 	mov.w	r2, #0
 8000b80:	4b2d      	ldr	r3, [pc, #180]	@ (8000c38 <Read_Encoder_Speed+0x118>)
 8000b82:	f7ff fca1 	bl	80004c8 <__aeabi_dmul>
 8000b86:	4602      	mov	r2, r0
 8000b88:	460b      	mov	r3, r1
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	a322      	add	r3, pc, #136	@ (adr r3, 8000c18 <Read_Encoder_Speed+0xf8>)
 8000b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b94:	f7ff fdc2 	bl	800071c <__aeabi_ddiv>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	4610      	mov	r0, r2
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f04f 0200 	mov.w	r2, #0
 8000ba4:	4b25      	ldr	r3, [pc, #148]	@ (8000c3c <Read_Encoder_Speed+0x11c>)
 8000ba6:	f7ff fc8f 	bl	80004c8 <__aeabi_dmul>
 8000baa:	4602      	mov	r2, r0
 8000bac:	460b      	mov	r3, r1
 8000bae:	4610      	mov	r0, r2
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f7ff fe9b 	bl	80008ec <__aeabi_d2uiz>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <Read_Encoder_Speed+0x120>)
 8000bbc:	801a      	strh	r2, [r3, #0]
    speed  = (motor_speed_rpm * 3.14 * D ) / 60; // tốc độ cm/s
 8000bbe:	4b20      	ldr	r3, [pc, #128]	@ (8000c40 <Read_Encoder_Speed+0x120>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fc15 	bl	80003f4 <__aeabi_i2d>
 8000bca:	a315      	add	r3, pc, #84	@ (adr r3, 8000c20 <Read_Encoder_Speed+0x100>)
 8000bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd0:	f7ff fc7a 	bl	80004c8 <__aeabi_dmul>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	4610      	mov	r0, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f04f 0200 	mov.w	r2, #0
 8000be0:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <Read_Encoder_Speed+0x124>)
 8000be2:	f7ff fc71 	bl	80004c8 <__aeabi_dmul>
 8000be6:	4602      	mov	r2, r0
 8000be8:	460b      	mov	r3, r1
 8000bea:	4610      	mov	r0, r2
 8000bec:	4619      	mov	r1, r3
 8000bee:	f04f 0200 	mov.w	r2, #0
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <Read_Encoder_Speed+0x11c>)
 8000bf4:	f7ff fd92 	bl	800071c <__aeabi_ddiv>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f7ff fe74 	bl	80008ec <__aeabi_d2uiz>
 8000c04:	4603      	mov	r3, r0
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <Read_Encoder_Speed+0x128>)
 8000c0a:	801a      	strh	r2, [r3, #0]
    last_encoder_count = encoder_count;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <Read_Encoder_Speed+0x10c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	@ (8000c30 <Read_Encoder_Speed+0x110>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	00000000 	.word	0x00000000
 8000c1c:	40c35600 	.word	0x40c35600
 8000c20:	51eb851f 	.word	0x51eb851f
 8000c24:	40091eb8 	.word	0x40091eb8
 8000c28:	20000098 	.word	0x20000098
 8000c2c:	20000154 	.word	0x20000154
 8000c30:	2000015c 	.word	0x2000015c
 8000c34:	20000158 	.word	0x20000158
 8000c38:	40240000 	.word	0x40240000
 8000c3c:	404e0000 	.word	0x404e0000
 8000c40:	20000160 	.word	0x20000160
 8000c44:	40210000 	.word	0x40210000
 8000c48:	20000162 	.word	0x20000162

08000c4c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a04      	ldr	r2, [pc, #16]	@ (8000c6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d101      	bne.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        Read_Encoder_Speed();  // Gọi hàm tính tốc độ
 8000c5e:	f7ff ff5f 	bl	8000b20 <Read_Encoder_Speed>
    }
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40000800 	.word	0x40000800

08000c70 <CAN_Send_Speed>:
void CAN_Send_Speed(uint16_t speed)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	@ 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData;
    uint32_t TxMailbox;

    TxHeader.StdId = 0x04;         // ID tin nhắn
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	613b      	str	r3, [r7, #16]
    TxHeader.RTR = CAN_RTR_DATA;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    TxHeader.IDE = CAN_ID_STD;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 1;               // 1 byte speed_encoder
 8000c86:	2301      	movs	r3, #1
 8000c88:	623b      	str	r3, [r7, #32]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    TxData = speed;              // tốc độ
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	73fb      	strb	r3, [r7, #15]

    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, &TxData, &TxMailbox) != HAL_OK)
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	f107 020f 	add.w	r2, r7, #15
 8000c9e:	f107 0110 	add.w	r1, r7, #16
 8000ca2:	4806      	ldr	r0, [pc, #24]	@ (8000cbc <CAN_Send_Speed+0x4c>)
 8000ca4:	f000 ff88 	bl	8001bb8 <HAL_CAN_AddTxMessage>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <CAN_Send_Speed+0x42>
    {
        Error_Handler();
 8000cae:	f000 fadf 	bl	8001270 <Error_Handler>
    }
}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	@ 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000028 	.word	0x20000028

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	@ 0x30
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc6:	f000 fce9 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cca:	f000 f8a1 	bl	8000e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cce:	f000 fa4d 	bl	800116c <MX_GPIO_Init>
  MX_CAN_Init();
 8000cd2:	f000 f8e3 	bl	8000e9c <MX_CAN_Init>
  MX_TIM1_Init();
 8000cd6:	f000 f917 	bl	8000f08 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cda:	f000 f999 	bl	8001010 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cde:	f000 f9eb 	bl	80010b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4843      	ldr	r0, [pc, #268]	@ (8000df4 <main+0x134>)
 8000ce6:	f002 fa91 	bl	800320c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cea:	2100      	movs	r1, #0
 8000cec:	4842      	ldr	r0, [pc, #264]	@ (8000df8 <main+0x138>)
 8000cee:	f002 fa8d 	bl	800320c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000cf2:	2104      	movs	r1, #4
 8000cf4:	4841      	ldr	r0, [pc, #260]	@ (8000dfc <main+0x13c>)
 8000cf6:	f002 fbcd 	bl	8003494 <HAL_TIM_Encoder_Start>

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  canfilterconfig.FilterBank = 0;  // anything between 0 to SlaveStartFilterBank
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterIdHigh = 0x001<<5;
 8000d06:	2320      	movs	r3, #32
 8000d08:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterIdLow = 0x0000;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdHigh = 0x001<<5;
 8000d0e:	2320      	movs	r3, #32
 8000d10:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMaskIdLow = 0x0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	623b      	str	r3, [r7, #32]
  canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8000d1e:	230d      	movs	r3, #13
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	4619      	mov	r1, r3
 8000d26:	4836      	ldr	r0, [pc, #216]	@ (8000e00 <main+0x140>)
 8000d28:	f000 fe39 	bl	800199e <HAL_CAN_ConfigFilter>


  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4834      	ldr	r0, [pc, #208]	@ (8000e00 <main+0x140>)
 8000d30:	f001 f932 	bl	8001f98 <HAL_CAN_ActivateNotification>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <main+0x7e>
  {
	  Error_Handler();
 8000d3a:	f000 fa99 	bl	8001270 <Error_Handler>
  }

  HAL_CAN_Start(&hcan);
 8000d3e:	4830      	ldr	r0, [pc, #192]	@ (8000e00 <main+0x140>)
 8000d40:	f000 fef6 	bl	8001b30 <HAL_CAN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t last_speed = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (Motor_left_speed == 0) Motor_left_Set_Direction(0);
 8000d48:	4b2e      	ldr	r3, [pc, #184]	@ (8000e04 <main+0x144>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d103      	bne.n	8000d58 <main+0x98>
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fe33 	bl	80009bc <Motor_left_Set_Direction>
 8000d56:	e00e      	b.n	8000d76 <main+0xb6>
	  else if(Motor_left_speed > 0) Motor_left_Set_Direction(1);
 8000d58:	4b2a      	ldr	r3, [pc, #168]	@ (8000e04 <main+0x144>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	dd03      	ble.n	8000d68 <main+0xa8>
 8000d60:	2001      	movs	r0, #1
 8000d62:	f7ff fe2b 	bl	80009bc <Motor_left_Set_Direction>
 8000d66:	e006      	b.n	8000d76 <main+0xb6>
	  else if (Motor_left_speed < 0) Motor_left_Set_Direction(2);
 8000d68:	4b26      	ldr	r3, [pc, #152]	@ (8000e04 <main+0x144>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	da02      	bge.n	8000d76 <main+0xb6>
 8000d70:	2002      	movs	r0, #2
 8000d72:	f7ff fe23 	bl	80009bc <Motor_left_Set_Direction>
	  Motor_left_Set_Speed(abs(Motor_left_speed));
 8000d76:	4b23      	ldr	r3, [pc, #140]	@ (8000e04 <main+0x144>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	bfb8      	it	lt
 8000d7e:	425b      	neglt	r3, r3
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fdd2 	bl	800092c <Motor_left_Set_Speed>
	  if (Motor_right_speed == 0) Motor_right_Set_Direction(0);
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <main+0x148>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d103      	bne.n	8000d98 <main+0xd8>
 8000d90:	2000      	movs	r0, #0
 8000d92:	f7ff fe49 	bl	8000a28 <Motor_right_Set_Direction>
 8000d96:	e00e      	b.n	8000db6 <main+0xf6>
	  else if(Motor_right_speed > 0) Motor_right_Set_Direction(1);
 8000d98:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <main+0x148>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	dd03      	ble.n	8000da8 <main+0xe8>
 8000da0:	2001      	movs	r0, #1
 8000da2:	f7ff fe41 	bl	8000a28 <Motor_right_Set_Direction>
 8000da6:	e006      	b.n	8000db6 <main+0xf6>
	  else if (Motor_right_speed < 0) Motor_right_Set_Direction(2);
 8000da8:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <main+0x148>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	da02      	bge.n	8000db6 <main+0xf6>
 8000db0:	2002      	movs	r0, #2
 8000db2:	f7ff fe39 	bl	8000a28 <Motor_right_Set_Direction>
	  Motor_right_Set_Speed(abs(Motor_right_speed));
 8000db6:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <main+0x148>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	bfb8      	it	lt
 8000dbe:	425b      	neglt	r3, r3
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fdd6 	bl	8000974 <Motor_right_Set_Speed>
	  Read_Encoder_Speed();
 8000dc8:	f7ff feaa 	bl	8000b20 <Read_Encoder_Speed>
	  if(speed != last_speed)
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <main+0x14c>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d008      	beq.n	8000dea <main+0x12a>
	  {
		  last_speed = speed;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <main+0x14c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		  CAN_Send_Speed(speed);
 8000dde:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <main+0x14c>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff43 	bl	8000c70 <CAN_Send_Speed>
	  }
	  HAL_Delay(100);
 8000dea:	2064      	movs	r0, #100	@ 0x64
 8000dec:	f000 fcb8 	bl	8001760 <HAL_Delay>
	  if (Motor_left_speed == 0) Motor_left_Set_Direction(0);
 8000df0:	e7aa      	b.n	8000d48 <main+0x88>
 8000df2:	bf00      	nop
 8000df4:	20000050 	.word	0x20000050
 8000df8:	200000e0 	.word	0x200000e0
 8000dfc:	20000098 	.word	0x20000098
 8000e00:	20000028 	.word	0x20000028
 8000e04:	2000014c 	.word	0x2000014c
 8000e08:	20000150 	.word	0x20000150
 8000e0c:	20000162 	.word	0x20000162

08000e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b090      	sub	sp, #64	@ 0x40
 8000e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e16:	f107 0318 	add.w	r3, r7, #24
 8000e1a:	2228      	movs	r2, #40	@ 0x28
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 f877 	bl	8003f12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e32:	2301      	movs	r3, #1
 8000e34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e40:	2301      	movs	r3, #1
 8000e42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e44:	2302      	movs	r3, #2
 8000e46:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e4e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 fda9 	bl	80029b0 <HAL_RCC_OscConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e64:	f000 fa04 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e68:	230f      	movs	r3, #15
 8000e6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2102      	movs	r1, #2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f002 f816 	bl	8002eb4 <HAL_RCC_ClockConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e8e:	f000 f9ef 	bl	8001270 <Error_Handler>
  }
}
 8000e92:	bf00      	nop
 8000e94:	3740      	adds	r7, #64	@ 0x40
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000ea0:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_CAN_Init+0x64>)
 8000ea2:	4a18      	ldr	r2, [pc, #96]	@ (8000f04 <MX_CAN_Init+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000ea6:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <MX_CAN_Init+0x64>)
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000eac:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <MX_CAN_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <MX_CAN_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <MX_CAN_Init+0x64>)
 8000eba:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000ebe:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <MX_CAN_Init+0x64>)
 8000ec2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000ec6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <MX_CAN_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <MX_CAN_Init+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <MX_CAN_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <MX_CAN_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <MX_CAN_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <MX_CAN_Init+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	@ (8000f00 <MX_CAN_Init+0x64>)
 8000eee:	f000 fc5b 	bl	80017a8 <HAL_CAN_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000ef8:	f000 f9ba 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000028 	.word	0x20000028
 8000f04:	40006400 	.word	0x40006400

08000f08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b092      	sub	sp, #72	@ 0x48
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	615a      	str	r2, [r3, #20]
 8000f2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2220      	movs	r2, #32
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 ffed 	bl	8003f12 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f38:	4b33      	ldr	r3, [pc, #204]	@ (8001008 <MX_TIM1_Init+0x100>)
 8000f3a:	4a34      	ldr	r2, [pc, #208]	@ (800100c <MX_TIM1_Init+0x104>)
 8000f3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000f3e:	4b32      	ldr	r3, [pc, #200]	@ (8001008 <MX_TIM1_Init+0x100>)
 8000f40:	2247      	movs	r2, #71	@ 0x47
 8000f42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b30      	ldr	r3, [pc, #192]	@ (8001008 <MX_TIM1_Init+0x100>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001008 <MX_TIM1_Init+0x100>)
 8000f4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f52:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <MX_TIM1_Init+0x100>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	@ (8001008 <MX_TIM1_Init+0x100>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001008 <MX_TIM1_Init+0x100>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f64:	4828      	ldr	r0, [pc, #160]	@ (8001008 <MX_TIM1_Init+0x100>)
 8000f66:	f002 f901 	bl	800316c <HAL_TIM_PWM_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000f70:	f000 f97e 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f7c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f80:	4619      	mov	r1, r3
 8000f82:	4821      	ldr	r0, [pc, #132]	@ (8001008 <MX_TIM1_Init+0x100>)
 8000f84:	f002 ff04 	bl	8003d90 <HAL_TIMEx_MasterConfigSynchronization>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000f8e:	f000 f96f 	bl	8001270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f92:	2360      	movs	r3, #96	@ 0x60
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4814      	ldr	r0, [pc, #80]	@ (8001008 <MX_TIM1_Init+0x100>)
 8000fb8:	f002 fbea 	bl	8003790 <HAL_TIM_PWM_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000fc2:	f000 f955 	bl	8001270 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fde:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4807      	ldr	r0, [pc, #28]	@ (8001008 <MX_TIM1_Init+0x100>)
 8000fea:	f002 ff2f 	bl	8003e4c <HAL_TIMEx_ConfigBreakDeadTime>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000ff4:	f000 f93c 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ff8:	4803      	ldr	r0, [pc, #12]	@ (8001008 <MX_TIM1_Init+0x100>)
 8000ffa:	f000 fa7b 	bl	80014f4 <HAL_TIM_MspPostInit>

}
 8000ffe:	bf00      	nop
 8001000:	3748      	adds	r7, #72	@ 0x48
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000050 	.word	0x20000050
 800100c:	40012c00 	.word	0x40012c00

08001010 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	@ 0x30
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	2224      	movs	r2, #36	@ 0x24
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f002 ff77 	bl	8003f12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800102c:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <MX_TIM2_Init+0xa4>)
 800102e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001032:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001034:	4b1f      	ldr	r3, [pc, #124]	@ (80010b4 <MX_TIM2_Init+0xa4>)
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	4b1e      	ldr	r3, [pc, #120]	@ (80010b4 <MX_TIM2_Init+0xa4>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001040:	4b1c      	ldr	r3, [pc, #112]	@ (80010b4 <MX_TIM2_Init+0xa4>)
 8001042:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001046:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001048:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <MX_TIM2_Init+0xa4>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104e:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <MX_TIM2_Init+0xa4>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001054:	2303      	movs	r3, #3
 8001056:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800105c:	2301      	movs	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800106c:	2301      	movs	r3, #1
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <MX_TIM2_Init+0xa4>)
 8001080:	f002 f966 	bl	8003350 <HAL_TIM_Encoder_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800108a:	f000 f8f1 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	@ (80010b4 <MX_TIM2_Init+0xa4>)
 800109c:	f002 fe78 	bl	8003d90 <HAL_TIMEx_MasterConfigSynchronization>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80010a6:	f000 f8e3 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3730      	adds	r7, #48	@ 0x30
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000098 	.word	0x20000098

080010b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	@ 0x28
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010da:	4b22      	ldr	r3, [pc, #136]	@ (8001164 <MX_TIM3_Init+0xac>)
 80010dc:	4a22      	ldr	r2, [pc, #136]	@ (8001168 <MX_TIM3_Init+0xb0>)
 80010de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80010e0:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <MX_TIM3_Init+0xac>)
 80010e2:	2247      	movs	r2, #71	@ 0x47
 80010e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001164 <MX_TIM3_Init+0xac>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <MX_TIM3_Init+0xac>)
 80010ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <MX_TIM3_Init+0xac>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <MX_TIM3_Init+0xac>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001100:	4818      	ldr	r0, [pc, #96]	@ (8001164 <MX_TIM3_Init+0xac>)
 8001102:	f002 f833 	bl	800316c <HAL_TIM_PWM_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800110c:	f000 f8b0 	bl	8001270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4619      	mov	r1, r3
 800111e:	4811      	ldr	r0, [pc, #68]	@ (8001164 <MX_TIM3_Init+0xac>)
 8001120:	f002 fe36 	bl	8003d90 <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800112a:	f000 f8a1 	bl	8001270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112e:	2360      	movs	r3, #96	@ 0x60
 8001130:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	4807      	ldr	r0, [pc, #28]	@ (8001164 <MX_TIM3_Init+0xac>)
 8001146:	f002 fb23 	bl	8003790 <HAL_TIM_PWM_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001150:	f000 f88e 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001154:	4803      	ldr	r0, [pc, #12]	@ (8001164 <MX_TIM3_Init+0xac>)
 8001156:	f000 f9cd 	bl	80014f4 <HAL_TIM_MspPostInit>

}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	@ 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200000e0 	.word	0x200000e0
 8001168:	40000400 	.word	0x40000400

0800116c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001180:	4b37      	ldr	r3, [pc, #220]	@ (8001260 <MX_GPIO_Init+0xf4>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a36      	ldr	r2, [pc, #216]	@ (8001260 <MX_GPIO_Init+0xf4>)
 8001186:	f043 0310 	orr.w	r3, r3, #16
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b34      	ldr	r3, [pc, #208]	@ (8001260 <MX_GPIO_Init+0xf4>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0310 	and.w	r3, r3, #16
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001198:	4b31      	ldr	r3, [pc, #196]	@ (8001260 <MX_GPIO_Init+0xf4>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a30      	ldr	r2, [pc, #192]	@ (8001260 <MX_GPIO_Init+0xf4>)
 800119e:	f043 0320 	orr.w	r3, r3, #32
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001260 <MX_GPIO_Init+0xf4>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0320 	and.w	r3, r3, #32
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001260 <MX_GPIO_Init+0xf4>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001260 <MX_GPIO_Init+0xf4>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b28      	ldr	r3, [pc, #160]	@ (8001260 <MX_GPIO_Init+0xf4>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c8:	4b25      	ldr	r3, [pc, #148]	@ (8001260 <MX_GPIO_Init+0xf4>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a24      	ldr	r2, [pc, #144]	@ (8001260 <MX_GPIO_Init+0xf4>)
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <MX_GPIO_Init+0xf4>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011e6:	481f      	ldr	r0, [pc, #124]	@ (8001264 <MX_GPIO_Init+0xf8>)
 80011e8:	f001 fbb0 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2103      	movs	r1, #3
 80011f0:	481d      	ldr	r0, [pc, #116]	@ (8001268 <MX_GPIO_Init+0xfc>)
 80011f2:	f001 fbab 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2160      	movs	r1, #96	@ 0x60
 80011fa:	481c      	ldr	r0, [pc, #112]	@ (800126c <MX_GPIO_Init+0x100>)
 80011fc:	f001 fba6 	bl	800294c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001200:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2302      	movs	r3, #2
 8001210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4619      	mov	r1, r3
 8001218:	4812      	ldr	r0, [pc, #72]	@ (8001264 <MX_GPIO_Init+0xf8>)
 800121a:	f001 fa13 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800121e:	2303      	movs	r3, #3
 8001220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001226:	2301      	movs	r3, #1
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2302      	movs	r3, #2
 800122c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	4619      	mov	r1, r3
 8001234:	480c      	ldr	r0, [pc, #48]	@ (8001268 <MX_GPIO_Init+0xfc>)
 8001236:	f001 fa05 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800123a:	2360      	movs	r3, #96	@ 0x60
 800123c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001242:	2301      	movs	r3, #1
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2302      	movs	r3, #2
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4619      	mov	r1, r3
 8001250:	4806      	ldr	r0, [pc, #24]	@ (800126c <MX_GPIO_Init+0x100>)
 8001252:	f001 f9f7 	bl	8002644 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	40011000 	.word	0x40011000
 8001268:	40010800 	.word	0x40010800
 800126c:	40010c00 	.word	0x40010c00

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <Error_Handler+0x8>

0800127c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <HAL_MspInit+0x5c>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	4a14      	ldr	r2, [pc, #80]	@ (80012d8 <HAL_MspInit+0x5c>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6193      	str	r3, [r2, #24]
 800128e:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <HAL_MspInit+0x5c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <HAL_MspInit+0x5c>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4a0e      	ldr	r2, [pc, #56]	@ (80012d8 <HAL_MspInit+0x5c>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a4:	61d3      	str	r3, [r2, #28]
 80012a6:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <HAL_MspInit+0x5c>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_MspInit+0x60>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <HAL_MspInit+0x60>)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010000 	.word	0x40010000

080012e0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a28      	ldr	r2, [pc, #160]	@ (800139c <HAL_CAN_MspInit+0xbc>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d149      	bne.n	8001394 <HAL_CAN_MspInit+0xb4>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001300:	4b27      	ldr	r3, [pc, #156]	@ (80013a0 <HAL_CAN_MspInit+0xc0>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	4a26      	ldr	r2, [pc, #152]	@ (80013a0 <HAL_CAN_MspInit+0xc0>)
 8001306:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800130a:	61d3      	str	r3, [r2, #28]
 800130c:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <HAL_CAN_MspInit+0xc0>)
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b21      	ldr	r3, [pc, #132]	@ (80013a0 <HAL_CAN_MspInit+0xc0>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a20      	ldr	r2, [pc, #128]	@ (80013a0 <HAL_CAN_MspInit+0xc0>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <HAL_CAN_MspInit+0xc0>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001330:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001334:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133a:	2301      	movs	r3, #1
 800133c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4619      	mov	r1, r3
 8001344:	4817      	ldr	r0, [pc, #92]	@ (80013a4 <HAL_CAN_MspInit+0xc4>)
 8001346:	f001 f97d 	bl	8002644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800134a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800134e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	4811      	ldr	r0, [pc, #68]	@ (80013a4 <HAL_CAN_MspInit+0xc4>)
 8001360:	f001 f970 	bl	8002644 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	2013      	movs	r0, #19
 800136a:	f001 f934 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800136e:	2013      	movs	r0, #19
 8001370:	f001 f94d 	bl	800260e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2014      	movs	r0, #20
 800137a:	f001 f92c 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800137e:	2014      	movs	r0, #20
 8001380:	f001 f945 	bl	800260e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	2015      	movs	r0, #21
 800138a:	f001 f924 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800138e:	2015      	movs	r0, #21
 8001390:	f001 f93d 	bl	800260e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40006400 	.word	0x40006400
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010800 	.word	0x40010800

080013a8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a12      	ldr	r2, [pc, #72]	@ (8001400 <HAL_TIM_PWM_MspInit+0x58>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d10c      	bne.n	80013d4 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ba:	4b12      	ldr	r3, [pc, #72]	@ (8001404 <HAL_TIM_PWM_MspInit+0x5c>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a11      	ldr	r2, [pc, #68]	@ (8001404 <HAL_TIM_PWM_MspInit+0x5c>)
 80013c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <HAL_TIM_PWM_MspInit+0x5c>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013d2:	e010      	b.n	80013f6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001408 <HAL_TIM_PWM_MspInit+0x60>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d10b      	bne.n	80013f6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <HAL_TIM_PWM_MspInit+0x5c>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a08      	ldr	r2, [pc, #32]	@ (8001404 <HAL_TIM_PWM_MspInit+0x5c>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_TIM_PWM_MspInit+0x5c>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	40012c00 	.word	0x40012c00
 8001404:	40021000 	.word	0x40021000
 8001408:	40000400 	.word	0x40000400

0800140c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800142a:	d156      	bne.n	80014da <HAL_TIM_Encoder_MspInit+0xce>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142c:	4b2d      	ldr	r3, [pc, #180]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	4a2c      	ldr	r2, [pc, #176]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	61d3      	str	r3, [r2, #28]
 8001438:	4b2a      	ldr	r3, [pc, #168]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b27      	ldr	r3, [pc, #156]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a26      	ldr	r2, [pc, #152]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b24      	ldr	r3, [pc, #144]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4a20      	ldr	r2, [pc, #128]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001462:	f043 0308 	orr.w	r3, r3, #8
 8001466:	6193      	str	r3, [r2, #24]
 8001468:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001474:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4817      	ldr	r0, [pc, #92]	@ (80014e8 <HAL_TIM_Encoder_MspInit+0xdc>)
 800148a:	f001 f8db 	bl	8002644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800148e:	2308      	movs	r3, #8
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	4812      	ldr	r0, [pc, #72]	@ (80014ec <HAL_TIM_Encoder_MspInit+0xe0>)
 80014a2:	f001 f8cf 	bl	8002644 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_TIM_Encoder_MspInit+0xe4>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80014bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014c4:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <HAL_TIM_Encoder_MspInit+0xe4>)
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	201c      	movs	r0, #28
 80014d0:	f001 f881 	bl	80025d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d4:	201c      	movs	r0, #28
 80014d6:	f001 f89a 	bl	800260e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	@ 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010800 	.word	0x40010800
 80014ec:	40010c00 	.word	0x40010c00
 80014f0:	40010000 	.word	0x40010000

080014f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a1f      	ldr	r2, [pc, #124]	@ (800158c <HAL_TIM_MspPostInit+0x98>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d119      	bne.n	8001548 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b1e      	ldr	r3, [pc, #120]	@ (8001590 <HAL_TIM_MspPostInit+0x9c>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a1d      	ldr	r2, [pc, #116]	@ (8001590 <HAL_TIM_MspPostInit+0x9c>)
 800151a:	f043 0304 	orr.w	r3, r3, #4
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <HAL_TIM_MspPostInit+0x9c>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800152c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001530:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2302      	movs	r3, #2
 8001538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	4619      	mov	r1, r3
 8001540:	4814      	ldr	r0, [pc, #80]	@ (8001594 <HAL_TIM_MspPostInit+0xa0>)
 8001542:	f001 f87f 	bl	8002644 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001546:	e01c      	b.n	8001582 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a12      	ldr	r2, [pc, #72]	@ (8001598 <HAL_TIM_MspPostInit+0xa4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d117      	bne.n	8001582 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <HAL_TIM_MspPostInit+0x9c>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4a0e      	ldr	r2, [pc, #56]	@ (8001590 <HAL_TIM_MspPostInit+0x9c>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6193      	str	r3, [r2, #24]
 800155e:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <HAL_TIM_MspPostInit+0x9c>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800156a:	2340      	movs	r3, #64	@ 0x40
 800156c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2302      	movs	r3, #2
 8001574:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	@ (8001594 <HAL_TIM_MspPostInit+0xa0>)
 800157e:	f001 f861 	bl	8002644 <HAL_GPIO_Init>
}
 8001582:	bf00      	nop
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40012c00 	.word	0x40012c00
 8001590:	40021000 	.word	0x40021000
 8001594:	40010800 	.word	0x40010800
 8001598:	40000400 	.word	0x40000400

0800159c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <NMI_Handler+0x4>

080015a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <MemManage_Handler+0x4>

080015b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ec:	f000 f89c 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80015fa:	f000 fcf2 	bl	8001fe2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000028 	.word	0x20000028

08001608 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800160e:	f000 fce8 	bl	8001fe2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000028 	.word	0x20000028

0800161c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <CAN1_RX1_IRQHandler+0x10>)
 8001622:	f000 fcde 	bl	8001fe2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000028 	.word	0x20000028

08001630 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <TIM2_IRQHandler+0x10>)
 8001636:	f001 ffbb 	bl	80035b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000098 	.word	0x20000098

08001644 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001650:	f7ff fff8 	bl	8001644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001654:	480b      	ldr	r0, [pc, #44]	@ (8001684 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001656:	490c      	ldr	r1, [pc, #48]	@ (8001688 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001658:	4a0c      	ldr	r2, [pc, #48]	@ (800168c <LoopFillZerobss+0x16>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a09      	ldr	r2, [pc, #36]	@ (8001690 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800166c:	4c09      	ldr	r4, [pc, #36]	@ (8001694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167a:	f002 fc53 	bl	8003f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800167e:	f7ff fb1f 	bl	8000cc0 <main>
  bx lr
 8001682:	4770      	bx	lr
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800168c:	08003fb0 	.word	0x08003fb0
  ldr r2, =_sbss
 8001690:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001694:	20000168 	.word	0x20000168

08001698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_2_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <HAL_Init+0x28>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <HAL_Init+0x28>)
 80016a6:	f043 0310 	orr.w	r3, r3, #16
 80016aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 ff87 	bl	80025c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b2:	200f      	movs	r0, #15
 80016b4:	f000 f808 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b8:	f7ff fde0 	bl	800127c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40022000 	.word	0x40022000

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <HAL_InitTick+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <HAL_InitTick+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 ff9f 	bl	800262a <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 ff67 	bl	80025d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	@ (8001724 <HAL_InitTick+0x5c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000000 	.word	0x20000000
 8001720:	20000008 	.word	0x20000008
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <HAL_IncTick+0x1c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <HAL_IncTick+0x20>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a03      	ldr	r2, [pc, #12]	@ (8001748 <HAL_IncTick+0x20>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	20000008 	.word	0x20000008
 8001748:	20000164 	.word	0x20000164

0800174c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b02      	ldr	r3, [pc, #8]	@ (800175c <HAL_GetTick+0x10>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	20000164 	.word	0x20000164

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff fff0 	bl	800174c <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <HAL_Delay+0x44>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffe0 	bl	800174c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008

080017a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0ed      	b.n	8001996 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff fd8a 	bl	80012e0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017dc:	f7ff ffb6 	bl	800174c <HAL_GetTick>
 80017e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017e2:	e012      	b.n	800180a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017e4:	f7ff ffb2 	bl	800174c <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b0a      	cmp	r3, #10
 80017f0:	d90b      	bls.n	800180a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2205      	movs	r2, #5
 8001802:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0c5      	b.n	8001996 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0e5      	beq.n	80017e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0202 	bic.w	r2, r2, #2
 8001826:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001828:	f7ff ff90 	bl	800174c <HAL_GetTick>
 800182c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800182e:	e012      	b.n	8001856 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001830:	f7ff ff8c 	bl	800174c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b0a      	cmp	r3, #10
 800183c:	d90b      	bls.n	8001856 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2205      	movs	r2, #5
 800184e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e09f      	b.n	8001996 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1e5      	bne.n	8001830 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7e1b      	ldrb	r3, [r3, #24]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d108      	bne.n	800187e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e007      	b.n	800188e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7e5b      	ldrb	r3, [r3, #25]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d108      	bne.n	80018a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e007      	b.n	80018b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7e9b      	ldrb	r3, [r3, #26]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d108      	bne.n	80018d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0220 	orr.w	r2, r2, #32
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e007      	b.n	80018e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0220 	bic.w	r2, r2, #32
 80018e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7edb      	ldrb	r3, [r3, #27]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d108      	bne.n	80018fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0210 	bic.w	r2, r2, #16
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e007      	b.n	800190c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0210 	orr.w	r2, r2, #16
 800190a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7f1b      	ldrb	r3, [r3, #28]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d108      	bne.n	8001926 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0208 	orr.w	r2, r2, #8
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e007      	b.n	8001936 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0208 	bic.w	r2, r2, #8
 8001934:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7f5b      	ldrb	r3, [r3, #29]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0204 	orr.w	r2, r2, #4
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	e007      	b.n	8001960 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0204 	bic.w	r2, r2, #4
 800195e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	ea42 0103 	orr.w	r1, r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	1e5a      	subs	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800199e:	b480      	push	{r7}
 80019a0:	b087      	sub	sp, #28
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019b6:	7cfb      	ldrb	r3, [r7, #19]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d003      	beq.n	80019c4 <HAL_CAN_ConfigFilter+0x26>
 80019bc:	7cfb      	ldrb	r3, [r7, #19]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	f040 80aa 	bne.w	8001b18 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019ca:	f043 0201 	orr.w	r2, r3, #1
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	2201      	movs	r2, #1
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d123      	bne.n	8001a46 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	401a      	ands	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a20:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3248      	adds	r2, #72	@ 0x48
 8001a26:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a3a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a3c:	6979      	ldr	r1, [r7, #20]
 8001a3e:	3348      	adds	r3, #72	@ 0x48
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	440b      	add	r3, r1
 8001a44:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d122      	bne.n	8001a94 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	431a      	orrs	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a6e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3248      	adds	r2, #72	@ 0x48
 8001a74:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a88:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a8a:	6979      	ldr	r1, [r7, #20]
 8001a8c:	3348      	adds	r3, #72	@ 0x48
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d109      	bne.n	8001ab0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001aae:	e007      	b.n	8001ac0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d109      	bne.n	8001adc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001ada:	e007      	b.n	8001aec <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d107      	bne.n	8001b04 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	431a      	orrs	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b0a:	f023 0201 	bic.w	r2, r3, #1
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e006      	b.n	8001b26 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
  }
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d12e      	bne.n	8001ba2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b5c:	f7ff fdf6 	bl	800174c <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b62:	e012      	b.n	8001b8a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b64:	f7ff fdf2 	bl	800174c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b0a      	cmp	r3, #10
 8001b70:	d90b      	bls.n	8001b8a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b76:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2205      	movs	r2, #5
 8001b82:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e012      	b.n	8001bb0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1e5      	bne.n	8001b64 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e006      	b.n	8001bb0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
  }
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	@ 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bcc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bd6:	7ffb      	ldrb	r3, [r7, #31]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d003      	beq.n	8001be4 <HAL_CAN_AddTxMessage+0x2c>
 8001bdc:	7ffb      	ldrb	r3, [r7, #31]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	f040 80ad 	bne.w	8001d3e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10a      	bne.n	8001c04 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8095 	beq.w	8001d2e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	0e1b      	lsrs	r3, r3, #24
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c0e:	2201      	movs	r2, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	409a      	lsls	r2, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10d      	bne.n	8001c3c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c2a:	68f9      	ldr	r1, [r7, #12]
 8001c2c:	6809      	ldr	r1, [r1, #0]
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3318      	adds	r3, #24
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	440b      	add	r3, r1
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e00f      	b.n	8001c5c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c46:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c50:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3318      	adds	r3, #24
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	440b      	add	r3, r1
 8001c5a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6819      	ldr	r1, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3318      	adds	r3, #24
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	7d1b      	ldrb	r3, [r3, #20]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d111      	bne.n	8001c9c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	3318      	adds	r3, #24
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	4413      	add	r3, r2
 8001c84:	3304      	adds	r3, #4
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	6811      	ldr	r1, [r2, #0]
 8001c8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3318      	adds	r3, #24
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	440b      	add	r3, r1
 8001c98:	3304      	adds	r3, #4
 8001c9a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3307      	adds	r3, #7
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	061a      	lsls	r2, r3, #24
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3306      	adds	r3, #6
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	041b      	lsls	r3, r3, #16
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3305      	adds	r3, #5
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	3204      	adds	r2, #4
 8001cbc:	7812      	ldrb	r2, [r2, #0]
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	6811      	ldr	r1, [r2, #0]
 8001cc4:	ea43 0200 	orr.w	r2, r3, r0
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	440b      	add	r3, r1
 8001cce:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001cd2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3303      	adds	r3, #3
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	061a      	lsls	r2, r3, #24
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3302      	adds	r3, #2
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	041b      	lsls	r3, r3, #16
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	7812      	ldrb	r2, [r2, #0]
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	6811      	ldr	r1, [r2, #0]
 8001cfa:	ea43 0200 	orr.w	r2, r3, r0
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	440b      	add	r3, r1
 8001d04:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001d08:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	3318      	adds	r3, #24
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4413      	add	r3, r2
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	6811      	ldr	r1, [r2, #0]
 8001d1c:	f043 0201 	orr.w	r2, r3, #1
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3318      	adds	r3, #24
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	440b      	add	r3, r1
 8001d28:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e00e      	b.n	8001d4c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d32:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e006      	b.n	8001d4c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d42:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
  }
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3724      	adds	r7, #36	@ 0x24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d56:	b480      	push	{r7}
 8001d58:	b087      	sub	sp, #28
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d003      	beq.n	8001d7a <HAL_CAN_GetRxMessage+0x24>
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	f040 8103 	bne.w	8001f80 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10e      	bne.n	8001d9e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d116      	bne.n	8001dbc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d92:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0f7      	b.n	8001f8e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d107      	bne.n	8001dbc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0e8      	b.n	8001f8e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	331b      	adds	r3, #27
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	4413      	add	r3, r2
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0204 	and.w	r2, r3, #4
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10c      	bne.n	8001df4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	331b      	adds	r3, #27
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	4413      	add	r3, r2
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0d5b      	lsrs	r3, r3, #21
 8001dea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e00b      	b.n	8001e0c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	331b      	adds	r3, #27
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	4413      	add	r3, r2
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	08db      	lsrs	r3, r3, #3
 8001e04:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	331b      	adds	r3, #27
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	4413      	add	r3, r2
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0202 	and.w	r2, r3, #2
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	331b      	adds	r3, #27
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3304      	adds	r3, #4
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	611a      	str	r2, [r3, #16]
 8001e40:	e00b      	b.n	8001e5a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	331b      	adds	r3, #27
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3304      	adds	r3, #4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 020f 	and.w	r2, r3, #15
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	331b      	adds	r3, #27
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	4413      	add	r3, r2
 8001e66:	3304      	adds	r3, #4
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	0a1b      	lsrs	r3, r3, #8
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	331b      	adds	r3, #27
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3304      	adds	r3, #4
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	0c1b      	lsrs	r3, r3, #16
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	0a1a      	lsrs	r2, r3, #8
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	0c1a      	lsrs	r2, r3, #16
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	3302      	adds	r3, #2
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	0e1a      	lsrs	r2, r3, #24
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	3303      	adds	r3, #3
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	3304      	adds	r3, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	0a1a      	lsrs	r2, r3, #8
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	3305      	adds	r3, #5
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0c1a      	lsrs	r2, r3, #16
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	3306      	adds	r3, #6
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0e1a      	lsrs	r2, r3, #24
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	3307      	adds	r3, #7
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d108      	bne.n	8001f6c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0220 	orr.w	r2, r2, #32
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	e007      	b.n	8001f7c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0220 	orr.w	r2, r2, #32
 8001f7a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e006      	b.n	8001f8e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
  }
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	371c      	adds	r7, #28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d002      	beq.n	8001fb6 <HAL_CAN_ActivateNotification+0x1e>
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d109      	bne.n	8001fca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6959      	ldr	r1, [r3, #20]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e006      	b.n	8001fd8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
  }
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b08a      	sub	sp, #40	@ 0x28
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d07c      	beq.n	8002122 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d023      	beq.n	800207a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2201      	movs	r2, #1
 8002038:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f983 	bl	8002350 <HAL_CAN_TxMailbox0CompleteCallback>
 800204a:	e016      	b.n	800207a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d004      	beq.n	8002060 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
 800205e:	e00c      	b.n	800207a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d004      	beq.n	8002074 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
 8002072:	e002      	b.n	800207a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f986 	bl	8002386 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d024      	beq.n	80020ce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800208c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f962 	bl	8002362 <HAL_CAN_TxMailbox1CompleteCallback>
 800209e:	e016      	b.n	80020ce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d004      	beq.n	80020b4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b2:	e00c      	b.n	80020ce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c6:	e002      	b.n	80020ce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f965 	bl	8002398 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d024      	beq.n	8002122 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f941 	bl	8002374 <HAL_CAN_TxMailbox2CompleteCallback>
 80020f2:	e016      	b.n	8002122 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
 8002106:	e00c      	b.n	8002122 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
 800211a:	e002      	b.n	8002122 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f944 	bl	80023aa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00c      	beq.n	8002146 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2210      	movs	r2, #16
 8002144:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00b      	beq.n	8002168 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d006      	beq.n	8002168 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2208      	movs	r2, #8
 8002160:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f92a 	bl	80023bc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7fe fc87 	bl	8000a94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00c      	beq.n	80021aa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2210      	movs	r2, #16
 80021a8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00b      	beq.n	80021cc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2208      	movs	r2, #8
 80021c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f90a 	bl	80023e0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f8f2 	bl	80023ce <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00b      	beq.n	800220c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2210      	movs	r2, #16
 8002204:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f8f3 	bl	80023f2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2208      	movs	r2, #8
 8002226:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f8eb 	bl	8002404 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d07b      	beq.n	8002330 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b00      	cmp	r3, #0
 8002240:	d072      	beq.n	8002328 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800229c:	2b00      	cmp	r3, #0
 800229e:	d043      	beq.n	8002328 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d03e      	beq.n	8002328 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022b0:	2b60      	cmp	r3, #96	@ 0x60
 80022b2:	d02b      	beq.n	800230c <HAL_CAN_IRQHandler+0x32a>
 80022b4:	2b60      	cmp	r3, #96	@ 0x60
 80022b6:	d82e      	bhi.n	8002316 <HAL_CAN_IRQHandler+0x334>
 80022b8:	2b50      	cmp	r3, #80	@ 0x50
 80022ba:	d022      	beq.n	8002302 <HAL_CAN_IRQHandler+0x320>
 80022bc:	2b50      	cmp	r3, #80	@ 0x50
 80022be:	d82a      	bhi.n	8002316 <HAL_CAN_IRQHandler+0x334>
 80022c0:	2b40      	cmp	r3, #64	@ 0x40
 80022c2:	d019      	beq.n	80022f8 <HAL_CAN_IRQHandler+0x316>
 80022c4:	2b40      	cmp	r3, #64	@ 0x40
 80022c6:	d826      	bhi.n	8002316 <HAL_CAN_IRQHandler+0x334>
 80022c8:	2b30      	cmp	r3, #48	@ 0x30
 80022ca:	d010      	beq.n	80022ee <HAL_CAN_IRQHandler+0x30c>
 80022cc:	2b30      	cmp	r3, #48	@ 0x30
 80022ce:	d822      	bhi.n	8002316 <HAL_CAN_IRQHandler+0x334>
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d002      	beq.n	80022da <HAL_CAN_IRQHandler+0x2f8>
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	d005      	beq.n	80022e4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80022d8:	e01d      	b.n	8002316 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80022da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022dc:	f043 0308 	orr.w	r3, r3, #8
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022e2:	e019      	b.n	8002318 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	f043 0310 	orr.w	r3, r3, #16
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022ec:	e014      	b.n	8002318 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	f043 0320 	orr.w	r3, r3, #32
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022f6:	e00f      	b.n	8002318 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002300:	e00a      	b.n	8002318 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800230a:	e005      	b.n	8002318 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002314:	e000      	b.n	8002318 <HAL_CAN_IRQHandler+0x336>
            break;
 8002316:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002326:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2204      	movs	r2, #4
 800232e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f867 	bl	8002416 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002348:	bf00      	nop
 800234a:	3728      	adds	r7, #40	@ 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002438:	4b0c      	ldr	r3, [pc, #48]	@ (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002444:	4013      	ands	r3, r2
 8002446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245a:	4a04      	ldr	r2, [pc, #16]	@ (800246c <__NVIC_SetPriorityGrouping+0x44>)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	60d3      	str	r3, [r2, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002474:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <__NVIC_GetPriorityGrouping+0x18>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 0307 	and.w	r3, r3, #7
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db0b      	blt.n	80024b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4906      	ldr	r1, [pc, #24]	@ (80024c0 <__NVIC_EnableIRQ+0x34>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100

080024c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	6039      	str	r1, [r7, #0]
 80024ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	db0a      	blt.n	80024ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	490c      	ldr	r1, [pc, #48]	@ (8002510 <__NVIC_SetPriority+0x4c>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	0112      	lsls	r2, r2, #4
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	440b      	add	r3, r1
 80024e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ec:	e00a      	b.n	8002504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4908      	ldr	r1, [pc, #32]	@ (8002514 <__NVIC_SetPriority+0x50>)
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	3b04      	subs	r3, #4
 80024fc:	0112      	lsls	r2, r2, #4
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	440b      	add	r3, r1
 8002502:	761a      	strb	r2, [r3, #24]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000e100 	.word	0xe000e100
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	@ 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f1c3 0307 	rsb	r3, r3, #7
 8002532:	2b04      	cmp	r3, #4
 8002534:	bf28      	it	cs
 8002536:	2304      	movcs	r3, #4
 8002538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3304      	adds	r3, #4
 800253e:	2b06      	cmp	r3, #6
 8002540:	d902      	bls.n	8002548 <NVIC_EncodePriority+0x30>
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3b03      	subs	r3, #3
 8002546:	e000      	b.n	800254a <NVIC_EncodePriority+0x32>
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	f04f 32ff 	mov.w	r2, #4294967295
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43da      	mvns	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	401a      	ands	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002560:	f04f 31ff 	mov.w	r1, #4294967295
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	43d9      	mvns	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002570:	4313      	orrs	r3, r2
         );
}
 8002572:	4618      	mov	r0, r3
 8002574:	3724      	adds	r7, #36	@ 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800258c:	d301      	bcc.n	8002592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258e:	2301      	movs	r3, #1
 8002590:	e00f      	b.n	80025b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002592:	4a0a      	ldr	r2, [pc, #40]	@ (80025bc <SysTick_Config+0x40>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259a:	210f      	movs	r1, #15
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	f7ff ff90 	bl	80024c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a4:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <SysTick_Config+0x40>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025aa:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <SysTick_Config+0x40>)
 80025ac:	2207      	movs	r2, #7
 80025ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	e000e010 	.word	0xe000e010

080025c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff2d 	bl	8002428 <__NVIC_SetPriorityGrouping>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b086      	sub	sp, #24
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e8:	f7ff ff42 	bl	8002470 <__NVIC_GetPriorityGrouping>
 80025ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	6978      	ldr	r0, [r7, #20]
 80025f4:	f7ff ff90 	bl	8002518 <NVIC_EncodePriority>
 80025f8:	4602      	mov	r2, r0
 80025fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff5f 	bl	80024c4 <__NVIC_SetPriority>
}
 8002606:	bf00      	nop
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff35 	bl	800248c <__NVIC_EnableIRQ>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ffa2 	bl	800257c <SysTick_Config>
 8002638:	4603      	mov	r3, r0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002644:	b480      	push	{r7}
 8002646:	b08b      	sub	sp, #44	@ 0x2c
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800264e:	2300      	movs	r3, #0
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002652:	2300      	movs	r3, #0
 8002654:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002656:	e169      	b.n	800292c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002658:	2201      	movs	r2, #1
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	429a      	cmp	r2, r3
 8002672:	f040 8158 	bne.w	8002926 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4a9a      	ldr	r2, [pc, #616]	@ (80028e4 <HAL_GPIO_Init+0x2a0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d05e      	beq.n	800273e <HAL_GPIO_Init+0xfa>
 8002680:	4a98      	ldr	r2, [pc, #608]	@ (80028e4 <HAL_GPIO_Init+0x2a0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d875      	bhi.n	8002772 <HAL_GPIO_Init+0x12e>
 8002686:	4a98      	ldr	r2, [pc, #608]	@ (80028e8 <HAL_GPIO_Init+0x2a4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d058      	beq.n	800273e <HAL_GPIO_Init+0xfa>
 800268c:	4a96      	ldr	r2, [pc, #600]	@ (80028e8 <HAL_GPIO_Init+0x2a4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d86f      	bhi.n	8002772 <HAL_GPIO_Init+0x12e>
 8002692:	4a96      	ldr	r2, [pc, #600]	@ (80028ec <HAL_GPIO_Init+0x2a8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d052      	beq.n	800273e <HAL_GPIO_Init+0xfa>
 8002698:	4a94      	ldr	r2, [pc, #592]	@ (80028ec <HAL_GPIO_Init+0x2a8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d869      	bhi.n	8002772 <HAL_GPIO_Init+0x12e>
 800269e:	4a94      	ldr	r2, [pc, #592]	@ (80028f0 <HAL_GPIO_Init+0x2ac>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d04c      	beq.n	800273e <HAL_GPIO_Init+0xfa>
 80026a4:	4a92      	ldr	r2, [pc, #584]	@ (80028f0 <HAL_GPIO_Init+0x2ac>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d863      	bhi.n	8002772 <HAL_GPIO_Init+0x12e>
 80026aa:	4a92      	ldr	r2, [pc, #584]	@ (80028f4 <HAL_GPIO_Init+0x2b0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d046      	beq.n	800273e <HAL_GPIO_Init+0xfa>
 80026b0:	4a90      	ldr	r2, [pc, #576]	@ (80028f4 <HAL_GPIO_Init+0x2b0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d85d      	bhi.n	8002772 <HAL_GPIO_Init+0x12e>
 80026b6:	2b12      	cmp	r3, #18
 80026b8:	d82a      	bhi.n	8002710 <HAL_GPIO_Init+0xcc>
 80026ba:	2b12      	cmp	r3, #18
 80026bc:	d859      	bhi.n	8002772 <HAL_GPIO_Init+0x12e>
 80026be:	a201      	add	r2, pc, #4	@ (adr r2, 80026c4 <HAL_GPIO_Init+0x80>)
 80026c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c4:	0800273f 	.word	0x0800273f
 80026c8:	08002719 	.word	0x08002719
 80026cc:	0800272b 	.word	0x0800272b
 80026d0:	0800276d 	.word	0x0800276d
 80026d4:	08002773 	.word	0x08002773
 80026d8:	08002773 	.word	0x08002773
 80026dc:	08002773 	.word	0x08002773
 80026e0:	08002773 	.word	0x08002773
 80026e4:	08002773 	.word	0x08002773
 80026e8:	08002773 	.word	0x08002773
 80026ec:	08002773 	.word	0x08002773
 80026f0:	08002773 	.word	0x08002773
 80026f4:	08002773 	.word	0x08002773
 80026f8:	08002773 	.word	0x08002773
 80026fc:	08002773 	.word	0x08002773
 8002700:	08002773 	.word	0x08002773
 8002704:	08002773 	.word	0x08002773
 8002708:	08002721 	.word	0x08002721
 800270c:	08002735 	.word	0x08002735
 8002710:	4a79      	ldr	r2, [pc, #484]	@ (80028f8 <HAL_GPIO_Init+0x2b4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002716:	e02c      	b.n	8002772 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	623b      	str	r3, [r7, #32]
          break;
 800271e:	e029      	b.n	8002774 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	3304      	adds	r3, #4
 8002726:	623b      	str	r3, [r7, #32]
          break;
 8002728:	e024      	b.n	8002774 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	3308      	adds	r3, #8
 8002730:	623b      	str	r3, [r7, #32]
          break;
 8002732:	e01f      	b.n	8002774 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	330c      	adds	r3, #12
 800273a:	623b      	str	r3, [r7, #32]
          break;
 800273c:	e01a      	b.n	8002774 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d102      	bne.n	800274c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002746:	2304      	movs	r3, #4
 8002748:	623b      	str	r3, [r7, #32]
          break;
 800274a:	e013      	b.n	8002774 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d105      	bne.n	8002760 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002754:	2308      	movs	r3, #8
 8002756:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	611a      	str	r2, [r3, #16]
          break;
 800275e:	e009      	b.n	8002774 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002760:	2308      	movs	r3, #8
 8002762:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	615a      	str	r2, [r3, #20]
          break;
 800276a:	e003      	b.n	8002774 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800276c:	2300      	movs	r3, #0
 800276e:	623b      	str	r3, [r7, #32]
          break;
 8002770:	e000      	b.n	8002774 <HAL_GPIO_Init+0x130>
          break;
 8002772:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2bff      	cmp	r3, #255	@ 0xff
 8002778:	d801      	bhi.n	800277e <HAL_GPIO_Init+0x13a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	e001      	b.n	8002782 <HAL_GPIO_Init+0x13e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3304      	adds	r3, #4
 8002782:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2bff      	cmp	r3, #255	@ 0xff
 8002788:	d802      	bhi.n	8002790 <HAL_GPIO_Init+0x14c>
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	e002      	b.n	8002796 <HAL_GPIO_Init+0x152>
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	3b08      	subs	r3, #8
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	210f      	movs	r1, #15
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	401a      	ands	r2, r3
 80027a8:	6a39      	ldr	r1, [r7, #32]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	fa01 f303 	lsl.w	r3, r1, r3
 80027b0:	431a      	orrs	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 80b1 	beq.w	8002926 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027c4:	4b4d      	ldr	r3, [pc, #308]	@ (80028fc <HAL_GPIO_Init+0x2b8>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	4a4c      	ldr	r2, [pc, #304]	@ (80028fc <HAL_GPIO_Init+0x2b8>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6193      	str	r3, [r2, #24]
 80027d0:	4b4a      	ldr	r3, [pc, #296]	@ (80028fc <HAL_GPIO_Init+0x2b8>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027dc:	4a48      	ldr	r2, [pc, #288]	@ (8002900 <HAL_GPIO_Init+0x2bc>)
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	3302      	adds	r3, #2
 80027e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	220f      	movs	r2, #15
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a40      	ldr	r2, [pc, #256]	@ (8002904 <HAL_GPIO_Init+0x2c0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d013      	beq.n	8002830 <HAL_GPIO_Init+0x1ec>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a3f      	ldr	r2, [pc, #252]	@ (8002908 <HAL_GPIO_Init+0x2c4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00d      	beq.n	800282c <HAL_GPIO_Init+0x1e8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a3e      	ldr	r2, [pc, #248]	@ (800290c <HAL_GPIO_Init+0x2c8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d007      	beq.n	8002828 <HAL_GPIO_Init+0x1e4>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3d      	ldr	r2, [pc, #244]	@ (8002910 <HAL_GPIO_Init+0x2cc>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d101      	bne.n	8002824 <HAL_GPIO_Init+0x1e0>
 8002820:	2303      	movs	r3, #3
 8002822:	e006      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 8002824:	2304      	movs	r3, #4
 8002826:	e004      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 8002828:	2302      	movs	r3, #2
 800282a:	e002      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 8002830:	2300      	movs	r3, #0
 8002832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002834:	f002 0203 	and.w	r2, r2, #3
 8002838:	0092      	lsls	r2, r2, #2
 800283a:	4093      	lsls	r3, r2
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002842:	492f      	ldr	r1, [pc, #188]	@ (8002900 <HAL_GPIO_Init+0x2bc>)
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	089b      	lsrs	r3, r3, #2
 8002848:	3302      	adds	r3, #2
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d006      	beq.n	800286a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800285c:	4b2d      	ldr	r3, [pc, #180]	@ (8002914 <HAL_GPIO_Init+0x2d0>)
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	492c      	ldr	r1, [pc, #176]	@ (8002914 <HAL_GPIO_Init+0x2d0>)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	608b      	str	r3, [r1, #8]
 8002868:	e006      	b.n	8002878 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800286a:	4b2a      	ldr	r3, [pc, #168]	@ (8002914 <HAL_GPIO_Init+0x2d0>)
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	43db      	mvns	r3, r3
 8002872:	4928      	ldr	r1, [pc, #160]	@ (8002914 <HAL_GPIO_Init+0x2d0>)
 8002874:	4013      	ands	r3, r2
 8002876:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d006      	beq.n	8002892 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002884:	4b23      	ldr	r3, [pc, #140]	@ (8002914 <HAL_GPIO_Init+0x2d0>)
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	4922      	ldr	r1, [pc, #136]	@ (8002914 <HAL_GPIO_Init+0x2d0>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	60cb      	str	r3, [r1, #12]
 8002890:	e006      	b.n	80028a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002892:	4b20      	ldr	r3, [pc, #128]	@ (8002914 <HAL_GPIO_Init+0x2d0>)
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	43db      	mvns	r3, r3
 800289a:	491e      	ldr	r1, [pc, #120]	@ (8002914 <HAL_GPIO_Init+0x2d0>)
 800289c:	4013      	ands	r3, r2
 800289e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d006      	beq.n	80028ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028ac:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <HAL_GPIO_Init+0x2d0>)
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	4918      	ldr	r1, [pc, #96]	@ (8002914 <HAL_GPIO_Init+0x2d0>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
 80028b8:	e006      	b.n	80028c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028ba:	4b16      	ldr	r3, [pc, #88]	@ (8002914 <HAL_GPIO_Init+0x2d0>)
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	4914      	ldr	r1, [pc, #80]	@ (8002914 <HAL_GPIO_Init+0x2d0>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d021      	beq.n	8002918 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002914 <HAL_GPIO_Init+0x2d0>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	490e      	ldr	r1, [pc, #56]	@ (8002914 <HAL_GPIO_Init+0x2d0>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]
 80028e0:	e021      	b.n	8002926 <HAL_GPIO_Init+0x2e2>
 80028e2:	bf00      	nop
 80028e4:	10320000 	.word	0x10320000
 80028e8:	10310000 	.word	0x10310000
 80028ec:	10220000 	.word	0x10220000
 80028f0:	10210000 	.word	0x10210000
 80028f4:	10120000 	.word	0x10120000
 80028f8:	10110000 	.word	0x10110000
 80028fc:	40021000 	.word	0x40021000
 8002900:	40010000 	.word	0x40010000
 8002904:	40010800 	.word	0x40010800
 8002908:	40010c00 	.word	0x40010c00
 800290c:	40011000 	.word	0x40011000
 8002910:	40011400 	.word	0x40011400
 8002914:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002918:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <HAL_GPIO_Init+0x304>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	43db      	mvns	r3, r3
 8002920:	4909      	ldr	r1, [pc, #36]	@ (8002948 <HAL_GPIO_Init+0x304>)
 8002922:	4013      	ands	r3, r2
 8002924:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	3301      	adds	r3, #1
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	fa22 f303 	lsr.w	r3, r2, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	f47f ae8e 	bne.w	8002658 <HAL_GPIO_Init+0x14>
  }
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	372c      	adds	r7, #44	@ 0x2c
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	40010400 	.word	0x40010400

0800294c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	807b      	strh	r3, [r7, #2]
 8002958:	4613      	mov	r3, r2
 800295a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800295c:	787b      	ldrb	r3, [r7, #1]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002968:	e003      	b.n	8002972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	041a      	lsls	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	611a      	str	r2, [r3, #16]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800298e:	887a      	ldrh	r2, [r7, #2]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4013      	ands	r3, r2
 8002994:	041a      	lsls	r2, r3, #16
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	43d9      	mvns	r1, r3
 800299a:	887b      	ldrh	r3, [r7, #2]
 800299c:	400b      	ands	r3, r1
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	611a      	str	r2, [r3, #16]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
	...

080029b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e272      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8087 	beq.w	8002ade <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d0:	4b92      	ldr	r3, [pc, #584]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d00c      	beq.n	80029f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029dc:	4b8f      	ldr	r3, [pc, #572]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d112      	bne.n	8002a0e <HAL_RCC_OscConfig+0x5e>
 80029e8:	4b8c      	ldr	r3, [pc, #560]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029f4:	d10b      	bne.n	8002a0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f6:	4b89      	ldr	r3, [pc, #548]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d06c      	beq.n	8002adc <HAL_RCC_OscConfig+0x12c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d168      	bne.n	8002adc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e24c      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a16:	d106      	bne.n	8002a26 <HAL_RCC_OscConfig+0x76>
 8002a18:	4b80      	ldr	r3, [pc, #512]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a7f      	ldr	r2, [pc, #508]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	e02e      	b.n	8002a84 <HAL_RCC_OscConfig+0xd4>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x98>
 8002a2e:	4b7b      	ldr	r3, [pc, #492]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a7a      	ldr	r2, [pc, #488]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b78      	ldr	r3, [pc, #480]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a77      	ldr	r2, [pc, #476]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e01d      	b.n	8002a84 <HAL_RCC_OscConfig+0xd4>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0xbc>
 8002a52:	4b72      	ldr	r3, [pc, #456]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a71      	ldr	r2, [pc, #452]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b6f      	ldr	r3, [pc, #444]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a6e      	ldr	r2, [pc, #440]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0xd4>
 8002a6c:	4b6b      	ldr	r3, [pc, #428]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a6a      	ldr	r2, [pc, #424]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b68      	ldr	r3, [pc, #416]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a67      	ldr	r2, [pc, #412]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d013      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fe5e 	bl	800174c <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe fe5a 	bl	800174c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	@ 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e200      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0xe4>
 8002ab2:	e014      	b.n	8002ade <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fe4a 	bl	800174c <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7fe fe46 	bl	800174c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	@ 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1ec      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	4b53      	ldr	r3, [pc, #332]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x10c>
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d063      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aea:	4b4c      	ldr	r3, [pc, #304]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002af6:	4b49      	ldr	r3, [pc, #292]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d11c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x18c>
 8002b02:	4b46      	ldr	r3, [pc, #280]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d116      	bne.n	8002b3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	4b43      	ldr	r3, [pc, #268]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_RCC_OscConfig+0x176>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d001      	beq.n	8002b26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e1c0      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b3d      	ldr	r3, [pc, #244]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4939      	ldr	r1, [pc, #228]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	e03a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b44:	4b36      	ldr	r3, [pc, #216]	@ (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7fe fdff 	bl	800174c <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b52:	f7fe fdfb 	bl	800174c <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e1a1      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b64:	4b2d      	ldr	r3, [pc, #180]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b70:	4b2a      	ldr	r3, [pc, #168]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4927      	ldr	r1, [pc, #156]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]
 8002b84:	e015      	b.n	8002bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b86:	4b26      	ldr	r3, [pc, #152]	@ (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fdde 	bl	800174c <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b94:	f7fe fdda 	bl	800174c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e180      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d03a      	beq.n	8002c34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d019      	beq.n	8002bfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc6:	4b17      	ldr	r3, [pc, #92]	@ (8002c24 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bcc:	f7fe fdbe 	bl	800174c <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd4:	f7fe fdba 	bl	800174c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e160      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c1c <HAL_RCC_OscConfig+0x26c>)
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f000 fa9c 	bl	8003130 <RCC_Delay>
 8002bf8:	e01c      	b.n	8002c34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c00:	f7fe fda4 	bl	800174c <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c06:	e00f      	b.n	8002c28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c08:	f7fe fda0 	bl	800174c <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d908      	bls.n	8002c28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e146      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	42420000 	.word	0x42420000
 8002c24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c28:	4b92      	ldr	r3, [pc, #584]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e9      	bne.n	8002c08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80a6 	beq.w	8002d8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c42:	2300      	movs	r3, #0
 8002c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c46:	4b8b      	ldr	r3, [pc, #556]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10d      	bne.n	8002c6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c52:	4b88      	ldr	r3, [pc, #544]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4a87      	ldr	r2, [pc, #540]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c5c:	61d3      	str	r3, [r2, #28]
 8002c5e:	4b85      	ldr	r3, [pc, #532]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6e:	4b82      	ldr	r3, [pc, #520]	@ (8002e78 <HAL_RCC_OscConfig+0x4c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d118      	bne.n	8002cac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e78 <HAL_RCC_OscConfig+0x4c8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e78 <HAL_RCC_OscConfig+0x4c8>)
 8002c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c86:	f7fe fd61 	bl	800174c <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8e:	f7fe fd5d 	bl	800174c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b64      	cmp	r3, #100	@ 0x64
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e103      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca0:	4b75      	ldr	r3, [pc, #468]	@ (8002e78 <HAL_RCC_OscConfig+0x4c8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x312>
 8002cb4:	4b6f      	ldr	r3, [pc, #444]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4a6e      	ldr	r2, [pc, #440]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	6213      	str	r3, [r2, #32]
 8002cc0:	e02d      	b.n	8002d1e <HAL_RCC_OscConfig+0x36e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x334>
 8002cca:	4b6a      	ldr	r3, [pc, #424]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4a69      	ldr	r2, [pc, #420]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6213      	str	r3, [r2, #32]
 8002cd6:	4b67      	ldr	r3, [pc, #412]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	4a66      	ldr	r2, [pc, #408]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	6213      	str	r3, [r2, #32]
 8002ce2:	e01c      	b.n	8002d1e <HAL_RCC_OscConfig+0x36e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d10c      	bne.n	8002d06 <HAL_RCC_OscConfig+0x356>
 8002cec:	4b61      	ldr	r3, [pc, #388]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	4a60      	ldr	r2, [pc, #384]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	f043 0304 	orr.w	r3, r3, #4
 8002cf6:	6213      	str	r3, [r2, #32]
 8002cf8:	4b5e      	ldr	r3, [pc, #376]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4a5d      	ldr	r2, [pc, #372]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6213      	str	r3, [r2, #32]
 8002d04:	e00b      	b.n	8002d1e <HAL_RCC_OscConfig+0x36e>
 8002d06:	4b5b      	ldr	r3, [pc, #364]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4a5a      	ldr	r2, [pc, #360]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	6213      	str	r3, [r2, #32]
 8002d12:	4b58      	ldr	r3, [pc, #352]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4a57      	ldr	r2, [pc, #348]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	f023 0304 	bic.w	r3, r3, #4
 8002d1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d015      	beq.n	8002d52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d26:	f7fe fd11 	bl	800174c <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2e:	f7fe fd0d 	bl	800174c <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e0b1      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	4b4b      	ldr	r3, [pc, #300]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ee      	beq.n	8002d2e <HAL_RCC_OscConfig+0x37e>
 8002d50:	e014      	b.n	8002d7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d52:	f7fe fcfb 	bl	800174c <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fe fcf7 	bl	800174c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e09b      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d70:	4b40      	ldr	r3, [pc, #256]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ee      	bne.n	8002d5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d105      	bne.n	8002d8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d82:	4b3c      	ldr	r3, [pc, #240]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4a3b      	ldr	r2, [pc, #236]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 8087 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d98:	4b36      	ldr	r3, [pc, #216]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d061      	beq.n	8002e68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d146      	bne.n	8002e3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dac:	4b33      	ldr	r3, [pc, #204]	@ (8002e7c <HAL_RCC_OscConfig+0x4cc>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fe fccb 	bl	800174c <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dba:	f7fe fcc7 	bl	800174c <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e06d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dcc:	4b29      	ldr	r3, [pc, #164]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f0      	bne.n	8002dba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002de0:	d108      	bne.n	8002df4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002de2:	4b24      	ldr	r3, [pc, #144]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	4921      	ldr	r1, [pc, #132]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a19      	ldr	r1, [r3, #32]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	430b      	orrs	r3, r1
 8002e06:	491b      	ldr	r1, [pc, #108]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <HAL_RCC_OscConfig+0x4cc>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fe fc9b 	bl	800174c <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe fc97 	bl	800174c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e03d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e2c:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x46a>
 8002e38:	e035      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <HAL_RCC_OscConfig+0x4cc>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fe fc84 	bl	800174c <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe fc80 	bl	800174c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e026      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x498>
 8002e66:	e01e      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e019      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e80:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <HAL_RCC_OscConfig+0x500>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d106      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000

08002eb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0d0      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d910      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b67      	ldr	r3, [pc, #412]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 0207 	bic.w	r2, r3, #7
 8002ede:	4965      	ldr	r1, [pc, #404]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b63      	ldr	r3, [pc, #396]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0b8      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f10:	4b59      	ldr	r3, [pc, #356]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4a58      	ldr	r2, [pc, #352]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f28:	4b53      	ldr	r3, [pc, #332]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a52      	ldr	r2, [pc, #328]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f34:	4b50      	ldr	r3, [pc, #320]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	494d      	ldr	r1, [pc, #308]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d040      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	4b47      	ldr	r3, [pc, #284]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d115      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e07f      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b41      	ldr	r3, [pc, #260]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e073      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f82:	4b3d      	ldr	r3, [pc, #244]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e06b      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f92:	4b39      	ldr	r3, [pc, #228]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4936      	ldr	r1, [pc, #216]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa4:	f7fe fbd2 	bl	800174c <HAL_GetTick>
 8002fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fac:	f7fe fbce 	bl	800174c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e053      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	4b2d      	ldr	r3, [pc, #180]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 020c 	and.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d1eb      	bne.n	8002fac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b27      	ldr	r3, [pc, #156]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d210      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b24      	ldr	r3, [pc, #144]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 0207 	bic.w	r2, r3, #7
 8002fea:	4922      	ldr	r1, [pc, #136]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b20      	ldr	r3, [pc, #128]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e032      	b.n	800306a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003010:	4b19      	ldr	r3, [pc, #100]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4916      	ldr	r1, [pc, #88]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800302e:	4b12      	ldr	r3, [pc, #72]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	490e      	ldr	r1, [pc, #56]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003042:	f000 f821 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003046:	4602      	mov	r2, r0
 8003048:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	490a      	ldr	r1, [pc, #40]	@ (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8003054:	5ccb      	ldrb	r3, [r1, r3]
 8003056:	fa22 f303 	lsr.w	r3, r2, r3
 800305a:	4a09      	ldr	r2, [pc, #36]	@ (8003080 <HAL_RCC_ClockConfig+0x1cc>)
 800305c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800305e:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <HAL_RCC_ClockConfig+0x1d0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fb30 	bl	80016c8 <HAL_InitTick>

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40022000 	.word	0x40022000
 8003078:	40021000 	.word	0x40021000
 800307c:	08003f84 	.word	0x08003f84
 8003080:	20000000 	.word	0x20000000
 8003084:	20000004 	.word	0x20000004

08003088 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030a2:	4b1e      	ldr	r3, [pc, #120]	@ (800311c <HAL_RCC_GetSysClockFreq+0x94>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d002      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x30>
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d003      	beq.n	80030be <HAL_RCC_GetSysClockFreq+0x36>
 80030b6:	e027      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030b8:	4b19      	ldr	r3, [pc, #100]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ba:	613b      	str	r3, [r7, #16]
      break;
 80030bc:	e027      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	0c9b      	lsrs	r3, r3, #18
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	4a17      	ldr	r2, [pc, #92]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030c8:	5cd3      	ldrb	r3, [r2, r3]
 80030ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d010      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030d6:	4b11      	ldr	r3, [pc, #68]	@ (800311c <HAL_RCC_GetSysClockFreq+0x94>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	0c5b      	lsrs	r3, r3, #17
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	4a11      	ldr	r2, [pc, #68]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030e2:	5cd3      	ldrb	r3, [r2, r3]
 80030e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ea:	fb03 f202 	mul.w	r2, r3, r2
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e004      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a0c      	ldr	r2, [pc, #48]	@ (800312c <HAL_RCC_GetSysClockFreq+0xa4>)
 80030fc:	fb02 f303 	mul.w	r3, r2, r3
 8003100:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	613b      	str	r3, [r7, #16]
      break;
 8003106:	e002      	b.n	800310e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003108:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x98>)
 800310a:	613b      	str	r3, [r7, #16]
      break;
 800310c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310e:	693b      	ldr	r3, [r7, #16]
}
 8003110:	4618      	mov	r0, r3
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
 8003120:	007a1200 	.word	0x007a1200
 8003124:	08003f94 	.word	0x08003f94
 8003128:	08003fa4 	.word	0x08003fa4
 800312c:	003d0900 	.word	0x003d0900

08003130 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003138:	4b0a      	ldr	r3, [pc, #40]	@ (8003164 <RCC_Delay+0x34>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <RCC_Delay+0x38>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	0a5b      	lsrs	r3, r3, #9
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	fb02 f303 	mul.w	r3, r2, r3
 800314a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800314c:	bf00      	nop
  }
  while (Delay --);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1e5a      	subs	r2, r3, #1
 8003152:	60fa      	str	r2, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f9      	bne.n	800314c <RCC_Delay+0x1c>
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	20000000 	.word	0x20000000
 8003168:	10624dd3 	.word	0x10624dd3

0800316c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e041      	b.n	8003202 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fe f908 	bl	80013a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3304      	adds	r3, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f000 fbd6 	bl	800395c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <HAL_TIM_PWM_Start+0x24>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	e022      	b.n	8003276 <HAL_TIM_PWM_Start+0x6a>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b04      	cmp	r3, #4
 8003234:	d109      	bne.n	800324a <HAL_TIM_PWM_Start+0x3e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	bf14      	ite	ne
 8003242:	2301      	movne	r3, #1
 8003244:	2300      	moveq	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	e015      	b.n	8003276 <HAL_TIM_PWM_Start+0x6a>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d109      	bne.n	8003264 <HAL_TIM_PWM_Start+0x58>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	e008      	b.n	8003276 <HAL_TIM_PWM_Start+0x6a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e05e      	b.n	800333c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <HAL_TIM_PWM_Start+0x82>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800328c:	e013      	b.n	80032b6 <HAL_TIM_PWM_Start+0xaa>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b04      	cmp	r3, #4
 8003292:	d104      	bne.n	800329e <HAL_TIM_PWM_Start+0x92>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800329c:	e00b      	b.n	80032b6 <HAL_TIM_PWM_Start+0xaa>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d104      	bne.n	80032ae <HAL_TIM_PWM_Start+0xa2>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032ac:	e003      	b.n	80032b6 <HAL_TIM_PWM_Start+0xaa>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2202      	movs	r2, #2
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2201      	movs	r2, #1
 80032bc:	6839      	ldr	r1, [r7, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fd42 	bl	8003d48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003344 <HAL_TIM_PWM_Start+0x138>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d107      	bne.n	80032de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a18      	ldr	r2, [pc, #96]	@ (8003344 <HAL_TIM_PWM_Start+0x138>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00e      	beq.n	8003306 <HAL_TIM_PWM_Start+0xfa>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f0:	d009      	beq.n	8003306 <HAL_TIM_PWM_Start+0xfa>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a14      	ldr	r2, [pc, #80]	@ (8003348 <HAL_TIM_PWM_Start+0x13c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d004      	beq.n	8003306 <HAL_TIM_PWM_Start+0xfa>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a12      	ldr	r2, [pc, #72]	@ (800334c <HAL_TIM_PWM_Start+0x140>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d111      	bne.n	800332a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b06      	cmp	r3, #6
 8003316:	d010      	beq.n	800333a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003328:	e007      	b.n	800333a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800

08003350 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e093      	b.n	800348c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d106      	bne.n	800337e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7fe f847 	bl	800140c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2202      	movs	r2, #2
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003394:	f023 0307 	bic.w	r3, r3, #7
 8003398:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3304      	adds	r3, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4610      	mov	r0, r2
 80033a6:	f000 fad9 	bl	800395c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033d2:	f023 0303 	bic.w	r3, r3, #3
 80033d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	4313      	orrs	r3, r2
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80033f0:	f023 030c 	bic.w	r3, r3, #12
 80033f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003400:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	4313      	orrs	r3, r2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	011a      	lsls	r2, r3, #4
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	031b      	lsls	r3, r3, #12
 8003420:	4313      	orrs	r3, r2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800342e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	4313      	orrs	r3, r2
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80034bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d110      	bne.n	80034e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d102      	bne.n	80034d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80034ca:	7b7b      	ldrb	r3, [r7, #13]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d001      	beq.n	80034d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e069      	b.n	80035a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034e4:	e031      	b.n	800354a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d110      	bne.n	800350e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034ec:	7bbb      	ldrb	r3, [r7, #14]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d102      	bne.n	80034f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034f2:	7b3b      	ldrb	r3, [r7, #12]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d001      	beq.n	80034fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e055      	b.n	80035a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800350c:	e01d      	b.n	800354a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d108      	bne.n	8003526 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003514:	7bbb      	ldrb	r3, [r7, #14]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d105      	bne.n	8003526 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800351a:	7b7b      	ldrb	r3, [r7, #13]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d102      	bne.n	8003526 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003520:	7b3b      	ldrb	r3, [r7, #12]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d001      	beq.n	800352a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e03e      	b.n	80035a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2202      	movs	r2, #2
 8003536:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2202      	movs	r2, #2
 800353e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_TIM_Encoder_Start+0xc4>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b04      	cmp	r3, #4
 8003554:	d008      	beq.n	8003568 <HAL_TIM_Encoder_Start+0xd4>
 8003556:	e00f      	b.n	8003578 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2201      	movs	r2, #1
 800355e:	2100      	movs	r1, #0
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fbf1 	bl	8003d48 <TIM_CCxChannelCmd>
      break;
 8003566:	e016      	b.n	8003596 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2201      	movs	r2, #1
 800356e:	2104      	movs	r1, #4
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fbe9 	bl	8003d48 <TIM_CCxChannelCmd>
      break;
 8003576:	e00e      	b.n	8003596 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2201      	movs	r2, #1
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fbe1 	bl	8003d48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2201      	movs	r2, #1
 800358c:	2104      	movs	r1, #4
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fbda 	bl	8003d48 <TIM_CCxChannelCmd>
      break;
 8003594:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0201 	orr.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d020      	beq.n	8003614 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0202 	mvn.w	r2, #2
 80035e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f993 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f986 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f995 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	d020      	beq.n	8003660 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01b      	beq.n	8003660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0204 	mvn.w	r2, #4
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f96d 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f960 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f96f 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d020      	beq.n	80036ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01b      	beq.n	80036ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0208 	mvn.w	r2, #8
 800367c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2204      	movs	r2, #4
 8003682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f947 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 8003698:	e005      	b.n	80036a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f93a 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f949 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d020      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01b      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0210 	mvn.w	r2, #16
 80036c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2208      	movs	r2, #8
 80036ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f921 	bl	8003926 <HAL_TIM_IC_CaptureCallback>
 80036e4:	e005      	b.n	80036f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f914 	bl	8003914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f923 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00c      	beq.n	800371c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0201 	mvn.w	r2, #1
 8003714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd fa98 	bl	8000c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fbe0 	bl	8003f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00c      	beq.n	8003764 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800375c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8f3 	bl	800394a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00c      	beq.n	8003788 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0220 	mvn.w	r2, #32
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fbb3 	bl	8003eee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e0ae      	b.n	800390c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b0c      	cmp	r3, #12
 80037ba:	f200 809f 	bhi.w	80038fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037be:	a201      	add	r2, pc, #4	@ (adr r2, 80037c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	080037f9 	.word	0x080037f9
 80037c8:	080038fd 	.word	0x080038fd
 80037cc:	080038fd 	.word	0x080038fd
 80037d0:	080038fd 	.word	0x080038fd
 80037d4:	08003839 	.word	0x08003839
 80037d8:	080038fd 	.word	0x080038fd
 80037dc:	080038fd 	.word	0x080038fd
 80037e0:	080038fd 	.word	0x080038fd
 80037e4:	0800387b 	.word	0x0800387b
 80037e8:	080038fd 	.word	0x080038fd
 80037ec:	080038fd 	.word	0x080038fd
 80037f0:	080038fd 	.word	0x080038fd
 80037f4:	080038bb 	.word	0x080038bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f91a 	bl	8003a38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0208 	orr.w	r2, r2, #8
 8003812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0204 	bic.w	r2, r2, #4
 8003822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6999      	ldr	r1, [r3, #24]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	619a      	str	r2, [r3, #24]
      break;
 8003836:	e064      	b.n	8003902 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f960 	bl	8003b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6999      	ldr	r1, [r3, #24]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	021a      	lsls	r2, r3, #8
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	619a      	str	r2, [r3, #24]
      break;
 8003878:	e043      	b.n	8003902 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	4618      	mov	r0, r3
 8003882:	f000 f9a9 	bl	8003bd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69da      	ldr	r2, [r3, #28]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0208 	orr.w	r2, r2, #8
 8003894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0204 	bic.w	r2, r2, #4
 80038a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69d9      	ldr	r1, [r3, #28]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	61da      	str	r2, [r3, #28]
      break;
 80038b8:	e023      	b.n	8003902 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 f9f3 	bl	8003cac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69da      	ldr	r2, [r3, #28]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69d9      	ldr	r1, [r3, #28]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	021a      	lsls	r2, r3, #8
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	61da      	str	r2, [r3, #28]
      break;
 80038fa:	e002      	b.n	8003902 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003900:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800390a:	7dfb      	ldrb	r3, [r7, #23]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a2f      	ldr	r2, [pc, #188]	@ (8003a2c <TIM_Base_SetConfig+0xd0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00b      	beq.n	800398c <TIM_Base_SetConfig+0x30>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800397a:	d007      	beq.n	800398c <TIM_Base_SetConfig+0x30>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a2c      	ldr	r2, [pc, #176]	@ (8003a30 <TIM_Base_SetConfig+0xd4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_Base_SetConfig+0x30>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a2b      	ldr	r2, [pc, #172]	@ (8003a34 <TIM_Base_SetConfig+0xd8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a22      	ldr	r2, [pc, #136]	@ (8003a2c <TIM_Base_SetConfig+0xd0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00b      	beq.n	80039be <TIM_Base_SetConfig+0x62>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ac:	d007      	beq.n	80039be <TIM_Base_SetConfig+0x62>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a30 <TIM_Base_SetConfig+0xd4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_Base_SetConfig+0x62>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003a34 <TIM_Base_SetConfig+0xd8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d108      	bne.n	80039d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a0d      	ldr	r2, [pc, #52]	@ (8003a2c <TIM_Base_SetConfig+0xd0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d103      	bne.n	8003a04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f023 0201 	bic.w	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	611a      	str	r2, [r3, #16]
  }
}
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40000400 	.word	0x40000400
 8003a34:	40000800 	.word	0x40000800

08003a38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f023 0201 	bic.w	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0303 	bic.w	r3, r3, #3
 8003a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f023 0302 	bic.w	r3, r3, #2
 8003a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b00 <TIM_OC1_SetConfig+0xc8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d10c      	bne.n	8003aae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f023 0308 	bic.w	r3, r3, #8
 8003a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f023 0304 	bic.w	r3, r3, #4
 8003aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a13      	ldr	r2, [pc, #76]	@ (8003b00 <TIM_OC1_SetConfig+0xc8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d111      	bne.n	8003ada <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	621a      	str	r2, [r3, #32]
}
 8003af4:	bf00      	nop
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40012c00 	.word	0x40012c00

08003b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f023 0210 	bic.w	r2, r3, #16
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0320 	bic.w	r3, r3, #32
 8003b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd4 <TIM_OC2_SetConfig+0xd0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d10d      	bne.n	8003b80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a14      	ldr	r2, [pc, #80]	@ (8003bd4 <TIM_OC2_SetConfig+0xd0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d113      	bne.n	8003bb0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	621a      	str	r2, [r3, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr
 8003bd4:	40012c00 	.word	0x40012c00

08003bd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0303 	bic.w	r3, r3, #3
 8003c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca8 <TIM_OC3_SetConfig+0xd0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d10d      	bne.n	8003c52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a14      	ldr	r2, [pc, #80]	@ (8003ca8 <TIM_OC3_SetConfig+0xd0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d113      	bne.n	8003c82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	621a      	str	r2, [r3, #32]
}
 8003c9c:	bf00      	nop
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40012c00 	.word	0x40012c00

08003cac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	031b      	lsls	r3, r3, #12
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a0f      	ldr	r2, [pc, #60]	@ (8003d44 <TIM_OC4_SetConfig+0x98>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d109      	bne.n	8003d20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	019b      	lsls	r3, r3, #6
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	621a      	str	r2, [r3, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr
 8003d44:	40012c00 	.word	0x40012c00

08003d48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a1a      	ldr	r2, [r3, #32]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a1a      	ldr	r2, [r3, #32]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	431a      	orrs	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]
}
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e046      	b.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a16      	ldr	r2, [pc, #88]	@ (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00e      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df4:	d009      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a12      	ldr	r2, [pc, #72]	@ (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d004      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a10      	ldr	r2, [pc, #64]	@ (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d10c      	bne.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40000800 	.word	0x40000800

08003e4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e03d      	b.n	8003ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr

08003eee <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <memset>:
 8003f12:	4603      	mov	r3, r0
 8003f14:	4402      	add	r2, r0
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d100      	bne.n	8003f1c <memset+0xa>
 8003f1a:	4770      	bx	lr
 8003f1c:	f803 1b01 	strb.w	r1, [r3], #1
 8003f20:	e7f9      	b.n	8003f16 <memset+0x4>
	...

08003f24 <__libc_init_array>:
 8003f24:	b570      	push	{r4, r5, r6, lr}
 8003f26:	2600      	movs	r6, #0
 8003f28:	4d0c      	ldr	r5, [pc, #48]	@ (8003f5c <__libc_init_array+0x38>)
 8003f2a:	4c0d      	ldr	r4, [pc, #52]	@ (8003f60 <__libc_init_array+0x3c>)
 8003f2c:	1b64      	subs	r4, r4, r5
 8003f2e:	10a4      	asrs	r4, r4, #2
 8003f30:	42a6      	cmp	r6, r4
 8003f32:	d109      	bne.n	8003f48 <__libc_init_array+0x24>
 8003f34:	f000 f81a 	bl	8003f6c <_init>
 8003f38:	2600      	movs	r6, #0
 8003f3a:	4d0a      	ldr	r5, [pc, #40]	@ (8003f64 <__libc_init_array+0x40>)
 8003f3c:	4c0a      	ldr	r4, [pc, #40]	@ (8003f68 <__libc_init_array+0x44>)
 8003f3e:	1b64      	subs	r4, r4, r5
 8003f40:	10a4      	asrs	r4, r4, #2
 8003f42:	42a6      	cmp	r6, r4
 8003f44:	d105      	bne.n	8003f52 <__libc_init_array+0x2e>
 8003f46:	bd70      	pop	{r4, r5, r6, pc}
 8003f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4c:	4798      	blx	r3
 8003f4e:	3601      	adds	r6, #1
 8003f50:	e7ee      	b.n	8003f30 <__libc_init_array+0xc>
 8003f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f56:	4798      	blx	r3
 8003f58:	3601      	adds	r6, #1
 8003f5a:	e7f2      	b.n	8003f42 <__libc_init_array+0x1e>
 8003f5c:	08003fa8 	.word	0x08003fa8
 8003f60:	08003fa8 	.word	0x08003fa8
 8003f64:	08003fa8 	.word	0x08003fa8
 8003f68:	08003fac 	.word	0x08003fac

08003f6c <_init>:
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	bf00      	nop
 8003f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f72:	bc08      	pop	{r3}
 8003f74:	469e      	mov	lr, r3
 8003f76:	4770      	bx	lr

08003f78 <_fini>:
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	bf00      	nop
 8003f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7e:	bc08      	pop	{r3}
 8003f80:	469e      	mov	lr, r3
 8003f82:	4770      	bx	lr
